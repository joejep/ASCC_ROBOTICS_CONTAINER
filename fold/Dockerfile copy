FROM nvidia/cuda:12.3.2-cudnn9-devel-ubuntu20.04 AS build-image
RUN apt-key adv --fetch-keys "https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/3bf863cc.pub"
RUN apt-get update && apt-get install -y sudo wget kmod
ARG nvidia_binary_version="545.29.06"

ARG DEBIAN_FRONTEND=noninteractive
#RUN https://us.download.nvidia.com/tesla/545.29.06/NVIDIA-Linux-x86_64-545.29.06.run
ARG nvidia_binary="NVIDIA-Linux-x86_64-${nvidia_binary_version}.run"
RUN wget -q https://download.nvidia.com/XFree86/Linux-x86_64/${nvidia_binary_version}/${nvidia_binary}
#UN wget -q https://us.download.nvidia.com/tesla/${nvidia_binary_version}/${nvidia_binary}
RUN chmod +x ${nvidia_binary}
RUN ./${nvidia_binary} --accept-license --ui=none --no-kernel-module --no-questions &&  rm -rf ${nvidia_binary}
RUN apt-get update


RUN apt-get update && apt-get install -y locales && rm -rf /var/lib/apt/lists/* \
    && localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8
ENV LANG en_US.UTF-8


RUN apt update; apt install -y gnupg2
RUN apt-get -y update; apt-get -y install curl
#
RUN sh -c 'echo "deb http://packages.ros.org/ros/ubuntu focal main" > /etc/apt/sources.list.d/ros-latest.list'

RUN curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc |apt-key add -
RUN apt update && \
    apt install -y \
        python-tk \
        build-essential \
        ros-noetic-joy \
        ros-noetic-tf2-sensor-msgs \
        ros-noetic-rosbash \
        ros-noetic-rviz \
        ros-noetic-teleop-twist-joy \
        ros-noetic-teleop-twist-keyboard \
        ros-noetic-laser-proc \
        ros-noetic-rgbd-launch \
        ros-noetic-depthimage-to-laserscan \
        ros-noetic-rosserial-arduino \
        ros-noetic-rosserial-python \
        ros-noetic-rosserial-server \
        ros-noetic-rosserial-client \
        ros-noetic-rosserial-msgs \
        ros-noetic-amcl \
        ros-noetic-map-server \
        ros-noetic-move-base \
        ros-noetic-urdf \
        ros-noetic-robot-state-publisher \
        ros-noetic-xacro \
        ros-noetic-compressed-image-transport \
        ros-noetic-rqt-image-view \
        ros-noetic-gmapping \
        ros-noetic-navigation \
        ros-noetic-interactive-markers \
        ros-noetic-realsense2-camera \
        tmux wget nano




RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        software-properties-common \
        git \
        build-essential \
        libglew-dev\
        cmake \
        wget\
        libeigen3-dev \
        libepoxy-dev\
        ninja-build \
        ros-noetic-hector-trajectory-server \
        python3-catkin-tools \
        libopencv-dev && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get clean


#RUN pip install rospkg empy
WORKDIR /home/eiyike/ASCC_CONTAINER







# Install Pangolin
RUN git clone https://github.com/stevenlovegrove/Pangolin.git && \
    cd Pangolin && \
    mkdir build && cd build && \
    cmake -DBUILD_PANGOLIN_LIBOPENEXR=OFF .. && \
    make -j$(nproc) && \
    make install && \
    cd ../.. && \
    rm -rf Pangolin
    
    
RUN mkdir -p /ASCC_CONTAINER/src  


RUN apt-get update

RUN mkdir -p /ASCC_CONTAINER/src  && \
    cd /ASCC_CONTAINER/src && \
    git clone https://github.com/thien94/orb_slam3_ros.git && \
    cd orb_slam3_ros && \
    # Disable warnings as errors for ORB-SLAM3 compilation
    find . -name "CMakeLists.txt" -exec sed -i 's/-Werror//g' {} \; && \
    cd ../.. && \
    catkin config \
      --extend /opt/ros/noetic && \
    catkin build -j2 --no-status


    #RUN #echo "source /root/catkin_ws/devel/setup.bash" >> /root/.bashrc


# #  Source environmects
# RUN echo "source /opt/ros/noetic/setup.bash" >> /root/.bashrc && \
# echo "source /root/ASCCFINAL/devel/setup.bash" >> /root/.bashrc
   

RUN apt-get update && apt-get install -y \
    libpango1.0-dev \
    libxmu-dev \
    libxi-dev



#RUN /bin/bash -c "source /opt/ros/noetic/setup.bash && catkin config --extend /opt/ros/noetic && catkin build orb_slam3_ros"


SHELL ["/bin/bash", "-c"]


RUN apt-get install -y wget && rm -rf /var/lib/apt/lists/*

RUN wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh && \
    /bin/bash ~/miniconda.sh -b -p /opt/conda && \
    rm ~/miniconda.sh && \
    /opt/conda/bin/conda clean --all --yes && \
    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
    echo ". /opt/conda/etc/profile.d/conda.sh" >> ~/.bashrc && \
    echo "conda activate base" >> ~/.bashrc

# Set the PATH to include Conda
ENV PATH /opt/conda/bin:$PATH





# install RealSenseSDK / RealSense ROS wrapper
#
#INSTALL REALSENSE



# Install RealSense SDK and dependencies
RUN apt-key adv --keyserver keyserver.ubuntu.com --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE || \
    apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE && \
    add-apt-repository "deb https://librealsense.intel.com/Debian/apt-repo $(lsb_release -sc) main" && \
    apt-get update && \
    apt-get install -y \
    librealsense2-dev \
    librealsense2-utils \
    libssl-dev \
    libudev-dev \
    libusb-1.0-0-dev && \
    rm -rf /var/lib/apt/lists/*

# Add RealSense udev rules
RUN mkdir -p /etc/udev/rules.d/ && \
    wget https://raw.githubusercontent.com/IntelRealSense/librealsense/master/config/99-realsense-libusb.rules -O /etc/udev/rules.d/99-realsense-libusb.rules && \
    echo 'SUBSYSTEM=="usb", ATTR{idVendor}=="8086", MODE="0666"' >> /etc/udev/rules.d/99-realsense.rules
    
RUN apt-get update && apt-get install -y git



RUN apt-get update && apt-get install -y \
    libgoogle-glog-dev \
    libgtest-dev \
    libleveldb-dev \
    liblmdb-dev \
    libopencv-dev \
    libopenmpi-dev \
    libsnappy-dev \
    openmpi-bin \
    openmpi-doc \
    libprotobuf-dev \
    protobuf-compiler \
    libatlas-base-dev \
    libopenblas-dev \
    libboost-all-dev \
    libhdf5-serial-dev \
    libgflags-dev \
    libeigen3-dev \
    libyaml-dev \
    && rm -rf /var/lib/apt/lists/*
    
RUN apt-get update

# Create and activate the Conda environment
RUN conda create -y --name nerfstudio python=3.10 && \
    echo "conda activate nerfstudio" >> ~/.bashrc

COPY . .

# Remove old CMake
#RUN apt-get purge --auto-remove -y cmake

# Install a newer version of CMake
#RUN wget https://github.com/Kitware/CMake/releases/download/v3.30.1/cmake-3.30.1-linux-x86_64.sh \
    #&& chmod +x cmake-3.30.1-linux-x86_64.sh \
   # && ./cmake-3.30.1-linux-x86_64.sh --skip-license --prefix=/usr/local \
   # && rm cmake-3.30.1-linux-x86_64.sh
# Verify CMake installation
#RUN cmake --version

RUN apt-get update

RUN  git clone -b ros1 https://github.com/javieryu/nerf_bridge.git &&\
    cd nerf_bridge &&\
    pip install -U --no-cache-dir gdown --pre && \
    gdown "https://drive.google.com/u/1/uc?id=1-7x7qQfB7bIw2zV4Lr6-yhvMpjXC84Q5&confirm=t" && \
    conda init bash && \
    eval "$($(which conda) shell.bash hook)" && \
    conda activate nerfstudio && \
    pip install nerfstudio==0.3.4 && \
    pip uninstall torch torchvision torchaudio -y && \
    cd .. && \
    bash script_edit.sh && \
    python --version &&\
    
    
    
    ##################################################################
    #pip install tinycudann-1.7-cp310-cp310-linux_x86_64.whl
    pip install rospkg &&\
    pip install torchvision==0.14.1 &&\
    pip install numpy==1.26.4&&\
    pip install rawpy==0.20&&\
    pip install tyro==0.5.3
    
    
    
    
    
    
    ####################################################################
    #pip install tinycudann-1.7-cp310-cp310-linux_x86_64.whl && \
    #git clone --recursive https://github.com/pytorch/pytorch && \
    #cd pytorch && \
    #conda install cmake ninja && \
#RUN git clone git://github.com/ninja-build/ninja.git && cd ninja&&\
   # git checkout release&&\
   # ./configure.py --bootstrap&&\
    #cmake -Bbuild-cmake&&\
    #cmake --build build-cmake&&\
    #cd ..&&\
    #pip install -r requirements.txt && \
    #git checkout v1.13.1 && \
    #git submodule sync && \
    #git submodule update --init --recursive && \
    #export CMAKE_PREFIX_PATH=${CONDA_PREFIX:-"$(dirname $(which conda))/../"} && \
    #python setup.py develop
    
    
    
#RUN git clone https://github.com/nerfstudio-project/nerfstudio.git /nerfstudio&&\
    #cd nerfstudio &&\
    #git checkout tags/v0.3.4 &&\
    
    #pip install -e .

    #pip install -U --no-cache-dir gdown --pre && \
    #gdown "https://drive.google.com/u/1/uc?id=1-7x7qQfB7bIw2zV4Lr6-yhvMpjXC84Q5&confirm=t" && \
    #conda init bash && \
    #eval "$($(which conda) shell.bash hook)" && \
    #conda activate nerfstudio && \
    #pip install nerfstudio==0.3.4 && \
   # pip uninstall torch torchvision torchaudio -y && \
   # cd .. && \
    #bash script_edit.sh && \
   # python --version && \
    #pip install tinycudann-1.7-cp310-cp310-linux_x86_64.whl && \
    #git clone --recursive https://github.com/pytorch/pytorch && \
    #cd pytorch && \
    #python3 -m venv pytorch-env && \
    #. pytorch-env/bin/activate && \
    #pip install --upgrade pip && \
    #conda install cmake ninja && \
    #pip install -r requirements.txt && \
   #git checkout v1.13.1 && \
    #git submodule sync && \
    #git submodule update --init --recursive && \
    #export CMAKE_PREFIX_PATH=${CONDA_PREFIX:-"$(dirname $(which conda))/../"} && \
    #python setup.py develop&&\
    #pip install git+https://github.com/NVlabs/tiny-cuda-nn/#subdirectory=bindings/torch
    
    
    #export CMAKE_PREFIX_PATH=${CONDA_PREFIX:-"$(dirname $(which conda))/../"} &&\
    #export TORCH_CUDA_ARCH_LIST="6.0;6.1;7.0;7.5;8.0"&&\
    #export TORCH_NVCC_FLAGS="-Xfatbin -compress-all"&&\
    #export CMAKE_INSTALL_PREFIX=${CONDA_PREFIX:-"$(dirname $(which conda))/../"}&&\
    #python setup.py develop
    
    ##python setup.py clean && \
    #export CMAKE_PREFIX_PATH=${CONDA_PREFIX:-"$(dirname $(which conda))/../"} && \
    #mkdir -p build && cd build && \
    #cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release && \
    #ninja && \
    #python setup.py develop
   
   

#  Source environmects
RUN echo "source /opt/ros/noetic/setup.bash" >> /root/.bashrc && \
    echo "source /root/ASCC_CONTAINER/devel/setup.bash" >> /root/.bashrc

SHELL  ["/bin/bash", "-c"]
# Cleanup
RUN rm -rf /root/.cache

# Entrypoint

ADD entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

ENTRYPOINT [ "/entrypoint.sh" ]
